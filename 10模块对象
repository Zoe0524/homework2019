#文件内容如下,标题为:姓名,性别,年纪,薪资
#albert male 18 3000
#james male 38 30000
#林志玲 female 28 20000
#新垣结衣 female 28 10000
#要求从文件中取出每一条记录放入列表中,列表的每个元素都是如下格式：
#{'name':'albert','sex':'male','age':18,'salary':3000}
with open('D:\py\peach.txt','r',encoding='utf-8') as f:
    list_info=[]
    for line in f:
        line_info=line.split(' ')
        name=line_info[0]
        sex=line_info[1]
        age=int(line_info[2])
        salary=int(line_info[3])
        people={'name':name,'sex':sex,'age':age,'salary':salary}
        list_info.append(people)
print(list_info)


#根据题目1得到的列表,取出薪资最高的人的信息
print(max(list_info,key=lambda x:x['salary']))


#根据题目1得到的列表,取出最年轻的人的信息
print(min(list_info,key=lambda x:x['age']))


#根据题目1得到的列表,将每个人的信息中的名字映射成首字母大写的形式
def change_capitalize(list1):
    for i in range(len(list1)):
        if 'a'<=list1[i]['name'][0]<='z':
            list1[i]['name']=list1[i]['name'].capitalize()
    return list1

res=change_capitalize(list_info)
print(res)


#根据题目1得到的列表,过滤掉名字以a开头的人的信息
def filter_a(list1):
    list2=[]
    for i in range(len(list1)):
        if list1[i]['name'][0]!='a':
            list2.append(list1[i])
    return list2

res=filter_a(list_info)
print(res)


#使用递归打印斐波那契数列(前两个数的和得到第三个数，如：0、 1、1、2、3、5、8、13、21...)
def Fibonacci(n):
    if n<1:
        return
    elif n==1:
        return 0
    elif n==2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)

for i in range(1,20):
    print(Fibonacci(i))
    
    
#使用random模块写一个随机生成8位验证码的程序，验证码中有随机大小写字母和数字
import random
def get_verification():
    verification_code=' '
    for i in range(8):
        alpha1=chr(random.randint(65,90))
        alpha2=chr(random.randint(97,122))
        number=random.randint(0,9)
        verification_code+=random.choice([alpha1,alpha2,str(number)])
    return verification_code

res=get_verification()
print(res)


#写一个模拟撞库的程序，假如密码都是用md5加密的，没有加盐，撞库就是用多个猜测的密码是尝试比对正确的密码，比对过程一定是用md5来进行
import random
import hashlib

def get_password_violently:
    while True:
        password=' '
        for i in range(4):
            alpha=chr(ranodm.randint(65,90))
            number=random.randint(0,9)
            password+=ranodm.choice([alpha,str(number)])

        m=hashlib.md5()
        m.update(password.encode('utf-8'))
        md5_password=m.hexdigest()

        all_alpha_number=list(map(lambda x:chr(x),range(48,122)))

        for a in all_alpha_number:
            for b in all_alpha_number:
                for c in all_alpha_number:
                    for d in all_alpha_number:
                        input_password=a+b+c+d

                        m=hashlib.md5()
                        m.update(input_password.encode('utf-8'))
                        input_md5_password=m.hexdigest()

                        if input_md5_password==md5_password:
                            return password


#使用re模块写一个验证手机号码是否有效的程序
import re

def get_model_phone(file):
    right_info={}
    with open(file,'r',encoding='utf-8') as f:
        for line in f:
            list_info=line.split(' ')
            name=list_info[0]
            phone=list_info[-1]
            valid_phone=re.findall('13\d\d\d\d\d\d\d\d\d',phone)
            if valid_phone:
                right_info[name]=valid_phone[0]
    return(right_info)

res=get_model_phone('D:\py\peach.txt')
print(res)
